using Microsoft.Xna.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SpellAlchemyTheFortressEscape
{
    public enum GameLevel
    {
        DEMO20x20,
        DEMO25x25,
        DEMO40x40,
    };

    public class MapData
    {
        /* Class Members */
        public int[] levelData;
        private GameLevel mapLevel;

        /* Class Functions */
        public MapData(GameLevel i_gameLevel)
        {
            mapLevel = i_gameLevel;
        }

        public GameLevel GetMapGameLevel()
        {
            return mapLevel;
        }

        public int GetMapTileWidth()
        {
            switch (mapLevel)
            {
                case GameLevel.DEMO20x20:
                    return 20;
                case GameLevel.DEMO25x25:
                    return 25;
                case GameLevel.DEMO40x40:
                    return 40;
                default:
                    return 0;
            }
        }

        public int GetMapTileHeight()
        {
            switch (mapLevel)
            {
                case GameLevel.DEMO20x20:
                    return 20;
                case GameLevel.DEMO25x25:
                    return 25;
                case GameLevel.DEMO40x40:
                    return 40;
                default:
                    return 0;
            }
        }

        public int GetMapTileData(int i_index)
        {
            return levelData[i_index];
        }

        public int ConvertToMapIdex(int i_Row, int i_Col, int i_TotalRow, int i_TotalCol)
        {
            return i_Row * i_TotalRow + i_Col;
        }

        public List<Vector2> GetWalkablePaths()
        {
            List<Vector2> walkablePositions = new List<Vector2>();
            if (mapLevel == GameLevel.DEMO25x25)
            {
                for (int i = 0; i < 25; i++)
                {
                    for (int j = 0; j < 25; j++)
                    {
                        // if index is not a path (floor), store it in positions list
                        if (levelData[i * 25 + j] == (int)TileType.PATH)
                        {
                            walkablePositions.Add(new Vector2(j, i));
                        }
                    }
                }   
            }
            return walkablePositions;
        }

        public void InitializeMapData()
        {
            if ( mapLevel == GameLevel.DEMO25x25)
            {
                levelData = new int[25 * 25] 
                {              
                    01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
                    01,10,01,05,00,00,00,00,00,01,21,21,15,21,21,01,00,00,00,00,00,00,00,00,01,
                    01,00,01,01,01,00,01,01,00,01,21,21,00,21,21,01,00,01,01,01,01,01,05,00,01,
                    01,00,00,00,01,00,01,00,00,01,05,21,00,21,00,01,00,01,00,00,00,01,00,00,01,
                    01,00,01,00,01,01,01,00,01,01,00,00,00,00,00,01,00,01,00,01,00,00,00,01,01,
                    01,00,01,00,00,00,00,00,05,01,00,01,01,01,01,01,00,01,01,01,00,01,01,01,01,
                    01,00,01,01,01,01,01,01,01,01,00,00,00,00,00,00,00,00,00,01,00,01,00,05,01,
                    01,00,05,00,00,00,00,00,00,01,00,00,01,00,01,05,01,00,00,01,00,00,00,01,01,
                    01,00,00,00,01,00,01,01,01,01,01,00,01,00,01,01,01,00,00,01,00,01,00,00,01,
                    01,01,00,01,01,00,00,00,01,00,00,00,01,00,01,00,00,00,00,01,00,01,00,01,01,
                    01,00,00,00,00,00,01,00,01,01,01,00,01,00,01,01,01,01,00,00,00,01,00,00,01,
                    01,00,01,01,01,00,00,00,01,00,00,00,00,00,01,00,00,00,00,01,01,01,01,00,01,
                    01,00,00,00,01,01,01,00,01,01,01,01,01,01,01,00,01,01,01,01,01,01,01,01,01,
                    01,00,01,00,00,00,01,00,01,05,01,00,01,00,00,00,01,00,00,01,01,00,01,00,01,
                    01,00,01,00,01,00,00,00,00,00,00,00,00,00,01,00,00,00,00,00,00,00,01,00,01,
                    01,00,01,00,00,00,00,01,00,00,01,00,01,01,01,01,01,00,01,01,00,00,01,00,01,
                    01,00,01,01,01,01,01,01,00,01,01,00,01,05,00,01,00,00,00,01,01,01,01,00,01,
                    01,00,00,00,00,01,00,00,00,00,01,00,01,01,00,01,00,01,01,01,05,01,00,00,01,
                    01,01,01,01,00,01,00,01,01,00,01,00,00,00,00,01,00,01,00,01,00,00,00,01,01,
                    01,00,00,00,00,00,00,00,00,00,01,00,01,01,00,00,00,00,00,00,00,01,00,00,01,
                    01,01,01,01,01,01,01,00,01,00,01,00,00,01,01,01,01,01,00,01,01,01,01,00,01,
                    01,00,00,00,01,05,01,00,01,00,01,00,00,00,00,00,00,01,00,01,05,01,00,00,01,
                    01,00,01,00,01,00,01,01,01,00,01,00,01,01,01,01,00,01,00,01,00,01,00,00,01,
                    01,00,01,00,00,00,00,00,00,00,01,00,00,00,00,01,00,00,00,00,00,00,00,00,01,
                    01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
                };
            }

            if (mapLevel == GameLevel.DEMO20x20)
            {
                levelData = new int[20 * 20] 
                {
                    1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,3,4,1,1,1,
                    1,1,3,1,1,3,1,4,1,1,1,2,4,2,2,2,1,1,1,1,
                    1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,
                    1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,
                    1,1,9,1,1,7,1,7,1,1,1,1,1,1,1,1,1,1,1,1,
                    1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,3,4,1,1,1,
                    1,1,3,1,1,3,1,4,1,1,1,2,4,2,2,2,1,1,1,1,
                    1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,
                    1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,
                    1,1,9,1,1,7,1,7,1,1,1,1,1,1,1,1,1,1,1,1,
                    1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,3,4,1,1,1,
                    1,1,3,1,1,3,1,4,1,1,1,2,4,2,2,2,1,1,1,1,
                    1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,
                    1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,
                    1,1,9,1,1,7,1,7,1,1,1,1,1,1,1,1,1,1,1,1,
                    1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,3,4,1,1,1,
                    1,1,3,1,1,3,1,4,1,1,1,2,4,2,2,2,1,1,1,1,
                    1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,
                    1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,
                    1,1,9,1,1,7,1,7,1,1,1,1,1,1,1,1,1,1,1,1
                };
            }

            if (mapLevel == GameLevel.DEMO40x40)
            {
                levelData = new int[40 * 40]
                {
                    1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,3,4,1,1,1,1,1,3,1,1,3,1,4,1,1,1,2,4,2,2,2,1,1,1,1,
                    1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,
                    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,3,4,1,1,1,1,1,3,1,1,3,1,4,1,1,
                    1,1,9,1,1,7,1,7,1,1,1,2,4,2,2,2,1,1,1,1,1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,
                    1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,1,1,9,1,1,7,1,7,1,1,1,1,1,1,1,1,1,1,1,1,
                    1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,3,4,1,1,1,1,1,3,1,1,3,1,4,1,1,1,2,4,2,2,2,1,1,1,1,
                    1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,
                    1,1,9,1,1,7,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,3,4,1,1,1,
                    1,1,3,1,1,3,1,4,1,1,1,2,4,2,2,2,1,1,1,1,1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,
                    1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,1,1,9,1,1,7,1,7,1,1,1,1,1,1,1,1,1,1,1,1,
                    1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,3,4,1,1,1,1,1,3,1,1,3,1,4,1,1,1,2,4,2,2,2,1,1,1,1,
                    1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,
                    1,1,9,1,1,7,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,3,4,1,1,1,
                    1,1,3,1,1,3,1,4,1,1,1,2,4,2,2,2,1,1,1,1,1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,
                    1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,1,1,9,1,1,7,1,7,1,1,1,1,1,1,1,1,1,1,1,1,
                    1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,3,4,1,1,1,1,1,3,1,1,3,1,4,1,1,1,2,4,2,2,2,1,1,1,1,
                    1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,
                    1,1,9,1,1,7,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,3,4,1,1,1,
                    1,1,3,1,1,3,1,4,1,1,1,2,4,2,2,2,1,1,1,1,1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,
                    1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,1,1,9,1,1,7,1,7,1,1,1,0,2,0,1,3,4,1,1,1,
                    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,3,1,4,1,1,1,2,4,2,2,2,1,1,1,1,
                    1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,
                    1,1,9,1,1,7,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,3,4,1,1,1,
                    1,1,3,1,1,3,1,4,1,1,1,2,4,2,2,2,1,1,1,1,1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,
                    1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,1,1,9,1,1,7,1,7,1,1,1,1,1,1,1,1,1,1,1,1,
                    1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,3,4,1,1,1,1,1,3,1,1,3,1,4,1,1,1,2,4,2,2,2,1,1,1,1,
                    1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,
                    1,1,9,1,1,7,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,3,4,1,1,1,
                    1,1,3,1,1,3,1,4,1,1,1,2,4,2,2,2,1,1,1,1,1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,
                    1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,1,1,9,1,1,7,1,7,1,1,1,1,1,1,1,1,1,1,1,1,
                    1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,3,4,1,1,1,1,1,3,1,1,3,1,4,1,1,1,2,4,2,2,2,1,1,1,1,
                    1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,
                    1,1,9,1,1,7,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,3,4,1,1,1,
                    1,1,3,1,1,3,1,4,1,1,1,2,4,2,2,2,1,1,1,1,1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,
                    1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,1,1,9,1,1,7,1,7,1,1,1,1,1,1,1,1,1,1,1,1,
                    1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,3,4,1,1,1,1,1,3,1,1,3,1,4,1,1,1,2,4,2,2,2,1,1,1,1,
                    1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,
                    1,1,9,1,1,7,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,3,4,1,1,1,
                    1,1,3,1,1,3,1,4,1,1,1,2,4,2,2,2,1,1,1,1,1,2,5,1,1,1,1,1,1,1,1,0,6,1,1,1,1,5,1,1,
                    1,1,7,1,1,1,1,1,1,1,1,1,8,1,1,1,1,6,1,1,1,1,9,1,1,7,1,7,1,1,1,1,1,1,1,1,1,1,1,1
                };
            }
        }
    }
}